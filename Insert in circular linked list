Python ->
class Node:
    def __init__(self, value):
        self.data = value
        self.next = None
def insertAtPosition(last, data, pos):
    if last is None:
        if pos != 1:
            print("Invalid position!")
            return last
        new_node = Node(data)
        last = new_node
        last.next = last
        return last
    new_node = Node(data)
    curr = last.next
    if pos == 1:
        new_node.next = curr
        last.next = new_node
        return last
    for i in range(1, pos - 1):
        curr = curr.next
        if curr == last.next:
            print("Invalid position!")
            return last
    new_node.next = curr.next
    curr.next = new_node
    if curr == last:
        last = new_node
    return last
def print_list(last):
    if last is None:
        return
    head = last.next
    while True:
        print(head.data, end=" ")
        head = head.next
        if head == last.next:
            break
    print()
if __name__ == "__main__":
    first = Node(2)
    first.next = Node(3)
    first.next.next = Node(4)
    last = first.next.next
    last.next = first
    print("Original list: ", end="")
    print_list(last)
    data = 5
    pos = 2
    last = insertAtPosition(last, data, pos)
    print("List after insertions: ", end="")
    print_list(last)




c ->
#include <stdio.h>
#include <stdlib.h>
struct Node {
    int data;
    struct Node *next;
};
struct Node* createNode(int value);
struct Node* insertAtPosition(struct Node *last, int data, int pos) {
    if (last == NULL) {
        if (pos != 1) {
            printf("Invalid position!\n");
            return last;
        }
        struct Node *newNode = createNode(data);
        last = newNode;
        last->next = last;
        return last;
    }
    struct Node *newNode = createNode(data);
    struct Node *curr = last->next;
    if (pos == 1) {
        newNode->next = curr;
        last->next = newNode;
        return last;
    }
    for (int i = 1; i < pos - 1; ++i) {
        curr = curr->next;
        if (curr == last->next) {
            printf("Invalid position!\n");
            return last;
        }
    }
    newNode->next = curr->next;
    curr->next = newNode;
    if (curr == last) last = newNode;
    return last;
}
void printList(struct Node *last) {
    if (last == NULL) return;
    struct Node *head = last->next;
    while (1) {
        printf("%d ", head->data);
        head = head->next;
        if (head == last->next) break;
    }
    printf("\n");
}
struct Node* createNode(int value) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = value;
    newNode->next = NULL;
    return newNode;
}
int main() {
    struct Node *first = createNode(2);
    first->next = createNode(3);
    first->next->next = createNode(4);
    struct Node *last = first->next->next;
    last->next = first;
    printf("Original list: ");
    printList(last);
    int data = 5, pos = 2;
    last = insertAtPosition(last, data, pos);
    printf("List after insertions: ");
    printList(last);
    return 0;
}
